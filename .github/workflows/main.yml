# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    # The type of runner that the job will run on
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
                             
    env:
      Solution_Name: TestAction.sln

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

    # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.1
        
    # You may pin to the exact commit or the version.
    # uses: NuGet/setup-nuget@255f46e14d51fbc603743e2aa2907954463fbeb9
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v1.0.2
        
      - run: nuget restore $env:Solution_Name

    # Build the application
      - name: Build the application
        run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}
      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        if: ${{ matrix.configuration == 'Release' }} 
        with:
          name: artifact
          path: bin/${{ matrix.configuration }}

  release:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    needs: [build]
    
    runs-on: ubuntu-20.04
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: artifact
          path: artifact
      
      #- name: Display structure of downloaded files
      #  run: ls -R
      #  working-directory: artifact

      - name: Zip file
        run: |
          mkdir delivery
          cp artifact/TestAction.exe delivery
          cd delivery
          zip release ./*
          
      - name: Create a Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload a Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: delivery/release.zip
          asset_name: release_${{ github.ref }}.zip
          asset_content_type: application/zip
